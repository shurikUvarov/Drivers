const BaseDriver = require("base-driver");

/**
 * Teach Touch – Power • ComputerPower • InputSource
 * Упрощённая версия: все команды хранятся готовыми кадрами в Frames.
 */
class TeachTouchDriver extends BaseDriver {
  /* ─── МЕТАДАННЫЕ ─── */
  static metadata = {
    name: "TeachTouch",
    manufacturer: "Teach Touch",
    version: "1.0.1",
    description: "Power, PC power & source switching (lite)",
  };

  /* ─── ГОТОВЫЕ КАДРЫ ─── */
  static Frames = {
    /* Power */
    powerOn : Buffer.from([0xAA,0xBB,0xCC,0x01,0x00,0x00,0x01,0xDD,0xEE,0xFF]),
    powerOff: Buffer.from([0xAA,0xBB,0xCC,0x01,0x01,0x00,0x02,0xDD,0xEE,0xFF]),

    /* Computer power */
    pcOn  : Buffer.from([0xAA,0xBB,0xCC,0x09,0x01,0x00,0x0A,0xDD,0xEE,0xFF]),
    pcOff : Buffer.from([0xAA,0xBB,0xCC,0x09,0x00,0x00,0x09,0xDD,0xEE,0xFF]),

    /* Input sources */
    TV       : Buffer.from([0xAA,0xBB,0xCC,0x02,0x01,0x00,0x03,0xDD,0xEE,0xFF]),
    DTV      : Buffer.from([0xAA,0xBB,0xCC,0x02,0x10,0x00,0x12,0xDD,0xEE,0xFF]),
    AV       : Buffer.from([0xAA,0xBB,0xCC,0x02,0x02,0x00,0x04,0xDD,0xEE,0xFF]),
    YPBPR    : Buffer.from([0xAA,0xBB,0xCC,0x02,0x0F,0x00,0x0F,0xDD,0xEE,0xFF]),
    Android  : Buffer.from([0xAA,0xBB,0xCC,0x02,0x0A,0x00,0x0C,0xDD,0xEE,0xFF]),
    "PC/DVI" : Buffer.from([0xAA,0xBB,0xCC,0x02,0x08,0x00,0x0A,0xDD,0xEE,0xFF]),
    VGA1     : Buffer.from([0xAA,0xBB,0xCC,0x02,0x03,0x00,0x05,0xDD,0xEE,0xFF]),
    VGA2     : Buffer.from([0xAA,0xBB,0xCC,0x02,0x04,0x00,0x06,0xDD,0xEE,0xFF]),
    VGA3     : Buffer.from([0xAA,0xBB,0xCC,0x02,0x0B,0x00,0x0D,0xDD,0xEE,0xFF]),
    HDMI1    : Buffer.from([0xAA,0xBB,0xCC,0x02,0x06,0x00,0x08,0xDD,0xEE,0xFF]),
    HDMI2    : Buffer.from([0xAA,0xBB,0xCC,0x02,0x07,0x00,0x09,0xDD,0xEE,0xFF]),
    HDMI3    : Buffer.from([0xAA,0xBB,0xCC,0x02,0x05,0x00,0x07,0xDD,0xEE,0xFF]),
    DP       : Buffer.from([0xAA,0xBB,0xCC,0x02,0x11,0x00,0x13,0xDD,0xEE,0xFF]),
    HDMI4K   : Buffer.from([0xAA,0xBB,0xCC,0x02,0x0D,0x00,0x0F,0xDD,0xEE,0xFF]),
    "Android+":Buffer.from([0xAA,0xBB,0xCC,0x02,0x0E,0x00,0x0E,0xDD,0xEE,0xFF]),
    TypeC1   : Buffer.from([0xAA,0xBB,0xCC,0x02,0x13,0x00,0x15,0xDD,0xEE,0xFF]),
    TypeC2   : Buffer.from([0xAA,0xBB,0xCC,0x02,0x14,0x00,0x16,0xDD,0xEE,0xFF]),
  };

  /* ─── КОМАНДЫ (описание для UI) ─── */
  static commands = {
    setPower: {
      description: "Вкл / выкл устройство",
      parameters : [{ name:"state", type:"boolean", required:true }],
    },
    setComputerPower: {
      description: "Питание встроенного ПК",
      parameters : [{ name:"state", type:"boolean", required:true }],
    },
    setInputSource: {
      description: "Выбор входа",
      parameters : [{ name:"source", type:"string", enum:Object.keys(TeachTouchDriver.Frames).filter(k=>!k.startsWith('power')&&!k.startsWith('pc')), required:true }],
    },
  };

  /* ─── ТРАНСПОРТ ПО УМОЛЧАНИЮ ─── */
  static defaultTransport = { type:"tcp", port:23 };

  /* ══  Реализация команд  ══ */
  setPower({state})         { return {payload: TeachTouchDriver.Frames[state?"powerOn":"powerOff"]}; }
  setComputerPower({state}) { return {payload: TeachTouchDriver.Frames[state?"pcOn":"pcOff"]}; }

  setInputSource({source}) {
    const frame = TeachTouchDriver.Frames[source];
    return {payload: frame};
  }

  /* ─── Примитивный парсер ─── */
  parseResponse(buf){
    return { category:"response", response:{type:"raw",value:buf}, msg:buf.toString("hex") };
  }
}

module.exports = TeachTouchDriver;
