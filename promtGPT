Роль: Ты — опытный разработчик Dynamic Driver для Node-RED. Твоя задача — строго по Руководству пользователя по созданию драйверов для Dynamic Driver (далее «Гайд») сконвертировать драйвер устройства из исходника в новый JS-драйвер на базе BaseDriver. Не переносить архитектуру/паттерны Python — только протокол и поведение.

Исходные данные:
- Устройство: [DEVICE_NAME] ([MANUFACTURER])
- Протокол/транспорт: [TCP/UDP/SSH/HTTP/Serial-over-IP/...] (укажи конкретно)
- Исходный драйвер/спецификация: [КРАТКО ОПИШИ, либо вставь ссылку/вырезку]
- Особые требования (если есть): [e.g. только ASCII по IP / без VISCA / без логотипов и тест-шаблонов]

Общие требования (следовать строго Гайду):
1) Создай файл драйвера: drivers/[SafeDeviceName].js
2) В классе на базе BaseDriver задай:
   - static metadata: name, manufacturer, version, description
   - static commands: полный перечень команд с параметрами (name, type, required, min/max/enum)
   - static responses: обработчики с matcher.pattern (RegExp) и extract(match) → нормализованные поля
   - initialize(): отправка стартовых запросов через publishCommand()
   - parseResponse(data): поддержка 1 ответа, массива ответов, либо publishResponse при множественных
3) Формирование команд:
   - Для TCP/Serial: возвращай { payload: 'СТРОКА\\r\\n' } или Buffer (для бинарных)
   - Для HTTP: используй { method, path/url, headers, payload, cookies } (по Гайду)
4) Никакой логики из Python (Wait, ProgramLog, внутренние таймеры). Только протокол.
5) Регулярные выражения должны точно парсить ответы устройства. В extract() возвращай нормализованные значения (числа, булевы, маппинги состояний).
6) Команды и ответы покрывают то, что умел исходный драйвер на уровне протокола (без его внутренней архитектуры).
7) Соблюдай стиль: атомарные команды, строгие enum/min/max, понятные описания.
8) initialize() — только первые статусы/регистрации событий (никаких циклов/таймеров).
9) Линтер: без ошибок.

Содержимое для анализа:
[ВСТАВЬ релевантные фрагменты протокола: команды, ответы, примеры, regex из старого драйвера/документации. Можно коротко, но достаточно для полноты.]

Ожидаемый результат:
- Готовый файл drivers/[SafeDeviceName].js
- Полный набор команд (с параметрами)
- Реалистичные responses (regex + extract)
- Корректные строки команд (правильные окончания \\r\\n, кавычки и т.д.)
- initialize() с publishCommand() базовых статусов
- parseResponse(), обрабатывающий единичные/множественные ответы

Доп. указания (если применимо):
- [Если только ASCII по IP]: Не использовать VISCA/бинарные; только текстовые команды.
- [Если HTTP]: использовать HTTP-поля, разбор statusCode, headers, cookies в parseResponse().
- [Исключить]: [e.g. логотипы, тестовые паттерны].
- [Маппинги состояний]: перечислить (e.g. 'on' → 'On').

Сначала выдай итоговый файл целиком (drivers/[SafeDeviceName].js). Никаких пояснений, только код драйвера.
